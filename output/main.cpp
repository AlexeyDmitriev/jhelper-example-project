/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author emli
 */




#include<bits/stdc++.h>

using namespace std;

#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)
#define forx(i, n) for(int i = 1 ; (i) <= (n) ; ++i)
#define ll long long
#define all(x) (x).begin(),(x).end()
#define sqr(x) (x) * (x)
#define debug(x) cout << #x <<" = " << x << endl
#define printvpair(v) for(auto x : v) cout << x.first  <<" " << x.second << endl;
#define printv(v) if (v.size()> 0) {for(auto x : v) cout << x << " "; cout << endl;}
#define MINUS(arr) memset(arr,0xff,sizeof(arr))

const int N = 1e6 + 7;

vector<ll> myArray(N);
vector<ll> arr, ans;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    ll n;
    cin >> n;
    arr.resize(n);
    ll i, j, sum = 0;
    for (i = 0; i < n; i++) {
        cin >> arr[i];
        sum += arr[i];
        myArray[arr[i]]++;
    }
    if (n == 2 && arr[0] == arr[1]) {
        cout << 2 << endl;
        cout << 1 << " " << 2 << endl;
        return 0;
    }
    for (i = 0; i < n; i++) {
        myArray[arr[i]]--;
        sum -= arr[i];
        if (sum > 2000000 || sum % 2) {
            myArray[arr[i]]++;
            sum += arr[i];
        } else {
            if (myArray[sum / 2] > 0) {
                ans.push_back(i + 1);
            }
            myArray[arr[i]]++;
            sum += arr[i];
        }
    }
    cout << ans.size() << endl;
    printv(ans);
    return 0;
}

int main() {
	CHoroshiiMassiv solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
